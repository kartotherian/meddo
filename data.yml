_prefs:
  disabled: []
  inspector: false
  mapid: ''
  rev: ''
  saveCenter: false
name: Meddo
description: Vector tiles for Wikipedia
attribution: 'Data Â© OpenStreetMap contributors'
center:
  - 0
  - 0
  - 4
minzoom: 0
maxzoom: 16 # For development, otherwise 15
_parts:
  osm2pgsql: &osm2pgsql
    type: postgis
    dbname: "ct"
    srid: 3857
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
Layer:
  - id: water
    geometry: polygon
    properties:
      minzoom: 0
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way
          FROM water_areas
          WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
            AND z(!scale_denominator!) >= 5
        UNION ALL
        SELECT
            NULL,
            way
          FROM ocean_polygons
          WHERE z(!scale_denominator!) >= 10
        UNION ALL
        SELECT
            NULL,
            way
          FROM simplified_ocean_polygons
          WHERE z(!scale_denominator!) < 10 AND z(!scale_denominator!) >= 5
        -- Switch to NE for very low zoom
        UNION ALL
        SELECT
            NULL,
            way
          FROM ne_ocean
          WHERE z(!scale_denominator!) < 5
        UNION ALL
        SELECT
            NULL,
            way
          FROM ne_lake
          WHERE z(!scale_denominator!) < 5
        ) AS water
  - id: water_name
    geometry: polygon
    properties:
      minzoom: 10
      buffer-size: 64
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            ST_PointOnSurface(way) way,
            name,
            (hstore_to_json(names))::text name_
          FROM water_areas
          WHERE way && !bbox!
            AND ST_PointOnSurface(way) && !bbox!
            AND way_area > 256*256*1/16*!pixel_width!::real*!pixel_height!::real
            AND NOT (way_area > 256*256*9*!pixel_width!::real*!pixel_height!::real AND z(!scale_denominator!) >= 6) -- filter out large areas at higher zooms
            AND (name IS NOT NULL OR names IS NOT NULL)
            AND water != 'river' -- Exclude rivers, which are better labeled with their centerline
        ) AS water_name
  - id: pier
    geometry: polygon
    properties:
      minzoom: 12
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way
          FROM pier_area
        --  WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
        UNION ALL
        SELECT
            osm_id,
            way
          FROM pier_line
        ) AS pier
  - id: waterway
    geometry: linestring
    properties:
      minzoom: 6
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            waterway AS class
          FROM waterways
          WHERE waterway = 'river' AND z(!scale_denominator!) >= 8
            OR waterway = 'canal' AND z(!scale_denominator!) >= 8
            OR waterway = 'stream' AND z(!scale_denominator!) >= 12
            OR waterway = 'drain' AND z(!scale_denominator!) >= 13
            OR waterway = 'ditch' AND z(!scale_denominator!) >= 13
        ) AS waterway
  - id: waterway_name
    geometry: linestring
    properties:
      minzoom: 6
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            name,
            (hstore_to_json(names))::text name_,
            waterway AS class
          FROM waterways
          WHERE name IS NOT NULL AND
            (waterway = 'river' AND z(!scale_denominator!) >= 8
              OR waterway = 'canal' AND z(!scale_denominator!) >= 11
              OR waterway = 'stream' AND z(!scale_denominator!) >= 12
              OR waterway = 'drain' AND z(!scale_denominator!) >= 13
              OR waterway = 'ditch' AND z(!scale_denominator!) >= 13)
        ) AS waterway
  - id: boundary
    geometry: linestring
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            admin_level,
            disputed
          FROM osmborder_lines
          WHERE (dividing_line OR disputed)
            AND (admin_level <= 2
            OR admin_level <= 4 AND z(!scale_denominator!) >= 3
            OR admin_level <= 6 AND z(!scale_denominator!) >= 7
            OR admin_level <= 8 AND z(!scale_denominator!) >= 10
            OR z(!scale_denominator!) >= 14)
        ) AS boundary
    properties:
      minzoom: 2
  - id: park
    geometry: polygon
    properties:
      minzoom: 8
      buffer-size: 8
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            class::text
          FROM protected_area
        ) AS park
  - id: park_name
    geometry: point
    properties:
      minzoom: 8
      buffer-size: 128
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            ST_PointOnSurface(way) way,
            class::text,
            name,
            (hstore_to_json(names))::text name_
          FROM protected_area
          WHERE way && !bbox!
            AND ST_PointOnSurface(way) && !bbox!
            AND name IS NOT NULL
            AND way_area > 0.25*256*256*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area
        ) AS park_name
  - id: building
    geometry: polygon
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way
          FROM buildings
          WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area
        ) AS building
    properties:
      minzoom: 12
  - id: transport
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            class::text,
            ramp,
            oneway,
            brunnel::text,
            layer
          FROM
            (SELECT
                *
              FROM
              (SELECT
                  osm_id,
                  CASE WHEN oneway = 'reverse' THEN ST_Reverse(way) ELSE way END AS way,
                  class,
                  ramp,
                  oneway IN ('true','reverse') AS oneway,
                  brunnel,
                  layer,
                  NULL::real AS way_area
                FROM roads
                WHERE way && !bbox!
                  AND (
                    class >= 'motorway'
                    OR class >= 'trunk' AND z(!scale_denominator!) >= 7
                    OR class >= 'primary' AND z(!scale_denominator!) >= 8
                    OR class >= 'tertiary' AND z(!scale_denominator!) >= 9
                    OR class >= 'minor' AND z(!scale_denominator!) >= 12
                    OR class >= 'service' AND z(!scale_denominator!) >= 14
                    OR z(!scale_denominator!) >= 14
                  ) AND NOT (ramp AND z(!scale_denominator!) < 11)
              UNION ALL
              SELECT
                  osm_id,
                  way,
                  class,
                  NULL::boolean AS ramp, -- cover ssy
                  NULL::boolean AS oneway,
                  brunnel,
                  layer,
                  NULL::real AS way_area
                FROM rail
                WHERE way && !bbox!
              UNION ALL
              SELECT
                  osm_id,
                  way,
                  class,
                  NULL::boolean AS ramp,
                  NULL::boolean AS oneway,
                  brunnel,
                  layer,
                  way_area
                FROM road_areas
                WHERE way && !bbox!
                ) AS t
            ORDER BY layer, ramp DESC, class ASC, way_area DESC NULLS LAST
          ) AS typed_transport
        ) AS transport
    properties:
      minzoom: 6
  - id: transport_name
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            name,
            (hstore_to_json(names))::text name_,
            ref,
            char_length(ref) AS ref_length,
            class::text,
            oneway
          FROM
            (SELECT
                *
              FROM
              (SELECT
                  osm_id,
                  CASE WHEN oneway = 'reverse' THEN ST_Reverse(way) ELSE way END AS way,
                  name,
                  names,
                  class,
                  oneway IN ('true','reverse') AS oneway,
                  array_to_string(refs, ';') AS ref,
                  NULL::real AS way_area
                FROM roads
                WHERE way && !bbox!
                  AND (name IS NOT NULL OR refs IS NOT NULL)
                  AND (
                    class >= 'motorway'
                    OR class >= 'trunk' AND z(!scale_denominator!) >= 7
                    OR class >= 'primary' AND z(!scale_denominator!) >= 8
                    OR class >= 'tertiary' AND z(!scale_denominator!) >= 9
                    OR class >= 'minor' AND z(!scale_denominator!) >= 14
                    OR class >= 'service' AND z(!scale_denominator!) >= 14
                    OR z(!scale_denominator!) >= 14
                  )
                ) AS t
            -- This sort needs to sort class reverse to the transport layer, where
            -- high-class roads have to be rendered on top of everything else. Here
            -- high-class roads need their labels placed first.
            ORDER BY class DESC, way_area NULLS FIRST,
              length(name) DESC, name, osm_id
          ) AS typed_transport_name
        ) AS transport_name
    properties:
      minzoom: 6
      buffer-size: 128
  - id: aeroway
    properties:
      minzoom: 10
      buffer-size: 8
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            aeroway::text AS class,
            ref
          FROM aeroway_line
          WHERE way && !bbox!
            AND (aeroway = 'runway' AND z(!scale_denominator!) >= 10
              OR aeroway = 'taxiway' AND z(!scale_denominator!) >= 12)
        UNION ALL
        SELECT
            osm_id,
            way,
            aeroway::text AS class,
            NULL::text AS ref
          FROM aeroway_area
          WHERE way && !bbox!
            AND way_area > 0.01*!pixel_width!::real*!pixel_height!::real
            AND z(!scale_denominator!) >= 12
        ) AS aeroway
  - id: country_name
    geometry: point
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            ST_PointOnSurface(way) way,
            name,
            (hstore_to_json(names))::text name_,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM (
            SELECT
                *
              FROM admin_area
              WHERE way && !bbox!
                AND ST_PointOnSurface(way) && !bbox!
                AND name IS NOT NULL
                AND level = 2
                AND way_area > 1024*!pixel_width!::real*!pixel_height!::real
                AND NOT (way_area > 256*256*9*!pixel_width!::real*!pixel_height!::real AND z(!scale_denominator!) >= 6) -- filter out large areas at higher zooms
              ORDER BY level ASC,
                way_area DESC
            ) admin_ordered
        ) AS state_name
    properties:
      minzoom: 2
      buffer-size: 256
  - id: place
    Datasource:
      <<: *osm2pgsql
      table: |-
        (WITH osm_places AS ( -- Get all OSM data once, since it will be used in two parts of a UNION later
          SELECT
              *
            FROM (
              SELECT
                  node_id(osm_id) osm_id,
                  name,
                  names,
                  class,
                  rank,
                  population,
                  way,
                  NULL::real AS way_area
                FROM place_point
              UNION ALL
              SELECT
                  osm_id,
                  name,
                  names,
                  class,
                  rank,
                  population,
                  way,
                  way_area
                FROM place_polygon) all_places
            WHERE way && !bbox!
              AND name IS NOT NULL
              AND (z(!scale_denominator!) < 8 AND rank >= 'town' AND class = 'settlement' -- For joining with NE data
                OR z(!scale_denominator!) >= 8 AND rank >= 'city' AND class = 'settlement'
                OR z(!scale_denominator!) >= 9 AND rank >= 'town' AND class = 'settlement'
                OR z(!scale_denominator!) >= 10 AND rank >= 'village' AND class = 'settlement'
                OR z(!scale_denominator!) >= 11 AND rank >= 'hamlet' AND class = 'settlement'
                OR z(!scale_denominator!) >= 13 AND rank >= 'neighbourhood' AND class = 'subregion')
          )
        SELECT
            osm_id,
            way,
            name,
            (hstore_to_json(names))::text name_,
            rank::text AS class, -- TODO: use a case statement to do this properly
            NULL::bool AS capital,
            NULL::int AS rank
          FROM (
            SELECT
                *
            FROM ( -- The places have an ORDER BY so need a subselect
              SELECT
                DISTINCT ON (ST_SnapToGrid(way, !pixel_width!::real*8, !pixel_height!::real*8))
                  osm_id,
                  way,
                  name,
                  names,
                  rank,
                  population,
                  way_area
                FROM (
                  SELECT
                      osm_id,
                      ST_PointOnSurface(way) way,
                      name,
                      names,
                      class,
                      rank,
                      population,
                      way_area
                    FROM osm_places
                  ) point_places
                WHERE way && !bbox! -- Refilter after PointOnSurface
                  AND z(!scale_denominator!) >= 8 -- Only do this for z8+
                ORDER BY
                  ST_SnapToGrid(way, !pixel_width!::real*8, !pixel_height!::real*8),
                  rank DESC NULLS LAST,
                  population DESC NULLS LAST,
                  way_area DESC NULLS LAST,
                  length(name) DESC,
                  name
              ) gridded_osm_places
            ORDER BY
              rank DESC NULLS LAST,
              population DESC NULLS LAST,
              way_area DESC NULLS LAST,
              length(name) DESC,
              name
          ) ordered_osm_places
        UNION ALL
        SELECT
            osm_id,
            way,
            name,
            (hstore_to_json(names))::text name_,
            'city' AS class,
            NULL::bool AS capital,
            NULL::int AS rank
          FROM (
            SELECT
                *
              FROM ( -- this subselect gets NE place names and tries to join them against OSM place names
                SELECT
                  DISTINCT ON (ne.ctid)
                    o.osm_id,
                    COALESCE(ST_PointOnSurface(o.way), ne.way) AS way,
                    COALESCE(o.name, ne.name) AS name,
                    o.names, -- Should get name:en from NE if no OSM match
                    labelrank,
                    scalerank,
                    natscale,
                    pop_max
                FROM ne_places ne
                  LEFT JOIN osm_places o ON (
                    (lower(unaccent(o.name)) IN (lower(unaccent(ne.name)),
                                                lower(unaccent(ne.namepar)),
                                                lower(unaccent(ne.namealt)),
                                                lower(unaccent(ne.nameascii)))
                    OR lower(unaccent(o.names->'en')) IN (lower(unaccent(ne.name)),
                                                lower(unaccent(ne.namepar)),
                                                lower(unaccent(ne.namealt)),
                                                lower(unaccent(ne.nameascii))))
                    AND ST_DWithin(ne.way, o.way, 50000)
                  )
                WHERE ne.way && !bbox!
                  AND z(!scale_denominator!) < 8 -- Use OSM for z8+
                  AND (z(!scale_denominator!) >= 7 AND scalerank < 7
                    OR z(!scale_denominator!) >= 6 AND scalerank < 6 -- NE has 4 and 5 the same
                    OR z(!scale_denominator!) >= 5 AND scalerank < 4
                    OR z(!scale_denominator!) >= 4 AND scalerank < 3
                    OR z(!scale_denominator!) >= 3 AND scalerank < 2)
                ORDER BY -- this order by determines the "best" OSM match.
                  ne.ctid,
                  levenshtein(lower(unaccent(o.name)), lower(unaccent(ne.name))) ASC,
                  ST_Distance(o.way, ne.way)
                ) ne_places
              ORDER BY -- Set the order in terms of NE paramaters
                labelrank ASC,
                scalerank ASC,
                natscale DESC,
                pop_max DESC,
                name
            ) ne_ordered
        ) AS place
    properties:
      minzoom: 2
      buffer-size: 256
  - id: state_name
    geometry: point
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            ST_PointOnSurface(way) way,
            name,
            (hstore_to_json(names))::text name_,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM (
            SELECT
                *
              FROM admin_area
              WHERE way && !bbox!
                AND ST_PointOnSurface(way) && !bbox!
                AND name IS NOT NULL
                AND level = 4
                AND way_area > 1024*!pixel_width!::real*!pixel_height!::real
                AND NOT (way_area > 256*256*9*!pixel_width!::real*!pixel_height!::real AND z(!scale_denominator!) >= 6) -- filter out large areas at higher zooms
              ORDER BY level ASC,
                way_area DESC
            ) admin_ordered
        ) AS state_name
    properties:
      minzoom: 4
      buffer-size: 256
  - id: landcover
    geometry: polygon
    properties:
      minzoom: 7
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            class
          FROM (SELECT
              osm_id,
              way,
              'wood' AS class,
              20 AS prio,
              way_area
            FROM wood_area
            WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
              AND z(!scale_denominator!) >= 7
          UNION ALL
          SELECT
              osm_id,
              way,
              'park' AS class,
              10 AS prio,
              way_area
            FROM recreation_polygon
            WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
              AND z(!scale_denominator!) >= 11
              AND recreation IN ('park', 'dog_park', 'garden', 'golf')
        ) AS features
        ORDER BY
          prio ASC,
          way_area DESC
        ) AS landcover
  - id: landuse
    geometry: polygon
    properties:
      minzoom: 12
      buffer-size: 4
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            class
          FROM (
            SELECT
                osm_id,
                way,
                'hospital' AS class,
                20 as prio,
                way_area
              FROM healthcare_polygon
              WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
                AND healthcare = 'hospital'
                AND z(!scale_denominator!) >= 12
            UNION ALL
            SELECT
                osm_id,
                way,
                education::text AS class,
                10 as prio,
                way_area
              FROM education_polygon
              WHERE way_area > 0.01*!pixel_width!::real*!pixel_height!::real
                AND (education = 'school' AND z(!scale_denominator!) >= 13
                  OR education = 'university' AND z(!scale_denominator!) >= 11
                  OR education = 'kindergarten' AND z(!scale_denominator!) >= 14
                  OR education = 'college' AND z(!scale_denominator!) >= 11
                  OR education = 'library' AND z(!scale_denominator!) >= 14)
          ) AS features
          ORDER BY
            prio DESC,
            way_area DESC
        ) AS landuse
  - id: transit_stop
    geometry: point
    properties:
      minzoom: 10
      buffer-size: 16
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            osm_id,
            way,
            transit_mode::text AS "mode",
            station
          FROM (
            SELECT
                osm_id,
                way,
                transit_mode,
                station,
                NULL::real AS way_area
              FROM transit_point
            UNION ALL
            SELECT
                osm_id,
                ST_PointOnSurface(way) AS way,
                transit_mode,
                station,
                way_area
              FROM transit_polygon
              WHERE way && !bbox!
          ) AS features
          WHERE way && !bbox!
            AND (transit_mode = 'ferry' AND z(!scale_denominator!) >= 10
              OR transit_mode = 'rail' AND station AND z(!scale_denominator!) >= 10
              OR transit_mode = 'rail' AND NOT station AND z(!scale_denominator!) >= 13
              OR transit_mode = 'tram' AND z(!scale_denominator!) >= 13
              OR transit_mode = 'bus' AND station AND z(!scale_denominator!) >= 13
              OR transit_mode = 'bus' AND NOT station AND z(!scale_denominator!) >= 15
              OR transit_mode = 'taxi' AND z(!scale_denominator!) >= 14)
          ORDER BY
            station DESC,
            CASE
              WHEN transit_mode = 'ferry' THEN 1
              WHEN transit_mode = 'rail' THEN 2
              WHEN transit_mode = 'tram' THEN 3
              WHEN transit_mode = 'taxi' THEN 4
              WHEN transit_mode = 'bus' THEN 5
              ELSE NULL END,
            way_area DESC NULLS LAST
        ) AS transit_stop
